{"version":3,"sources":["utils/covid19API.js","redux/sagas/index.js","redux/reducers/covid19Reducer.js","redux/reducers/index.js","redux/index.js","i18n/locales/index.js","styles/App.js","styles/Main.js","styles/MapLegend.js","i18n/allMessages.js","components/mapLegend/MapLegend.js","redux/selectors/index.js","components/main/Main.js","App.js","AppIntlWrapper.js","styles/Index.js","serviceWorker.js","index.js"],"names":["parsedData","fetchCovid19Data","Promise","resolve","reject","response","readRemoteFile","header","complete","results","by_province_date","buildCasesByProvinceDate","last_14_by_province","buildLast14Days","error","data","result","forEach","row","date","ine_code","province","dateMinus1","moment","subtract","format","currentAccumulated","parseInt","cases_accumulated","isNaN","lastDate","getLastUpdateDate","Object","keys","name","accumulated","i","currentDate","new_cases","Error","length","fetchCovidData","covid19DataSaga","call","covid19Data","put","type","payload","lastUpdateDate","message","takeEvery","initialState","noDataProvinces","rootReducer","combineReducers","covid19","state","action","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","covid19Sagas","en","es","AppWrapper","styled","div","MainWrapper","MapLegendWrapper","messages","defineMessages","title","id","defaultMessage","updateDate","provincePopup","noData","legendTitle","legendRed","legendYellow","legendGreen","legendBlack","dataSource","ColorLegend","className","text","MapLegend","formatMessage","useIntl","a","msg","target","href","getLast14ByProvice","getNoDataProvinces","LAT_LNG","getColor","provinceCode","cases","includes","Main","props","dispatch","useDispatch","useState","openLegend","setOpenLenged","last14ByProvince","useSelector","useEffect","closeLegend","isMobile","Map","center","zoom","onMove","onClick","onZoom","TileLayer","attribution","url","GeoJSON","spainProvinces","style","feature","color","weight","fillOpacity","fillColor","properties","cartodb_id","onEachFeature","layer","bindPopup","List","withOrientationChange","isLandscape","Loop","AppIntlWrapper","locale","location","search","replace","translations","key","Component","GlobalStyle","createGlobalStyle","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b4d9e489.chunk.js","sourcesContent":["import { readRemoteFile } from 'react-papaparse';\nimport moment from 'moment';\n\nconst DATA_URL =\n  'https://raw.githubusercontent.com/montera34/escovid19data/master/data/output/covid19-provincias-spain_consolidated.csv';\nlet parsedData;\n\n/**\n * Fetch CSV data from repository and builds data for map.\n * @returns {Promise<Object>}\n */\nexport const fetchCovid19Data = () =>\n  new Promise((resolve, reject) => {\n    const response = {};\n    readRemoteFile(DATA_URL, {\n      header: true,\n      complete: (results) => {\n        parsedData = results;\n        // console.log('Results:', results);\n        response.by_province_date = buildCasesByProvinceDate(results);\n        response.last_14_by_province = buildLast14Days(\n          response.by_province_date\n        );\n        resolve(response);\n      },\n      error: reject,\n    });\n  });\n\n/**\n * Build an object of this format:\n * {\n *   ine_code: {\n *     name: String,\n *     date1: {\n *       accumulated: Number,\n *       new_cases: Number\n *     },\n *     date2: {\n *       accumulated: Number,\n *       new_cases: Number\n *     },\n *     ...\n *   }\n * }\n * @param data Object from readRemoteFile call.\n * @returns {Object}\n */\nconst buildCasesByProvinceDate = (data) => {\n  const result = {};\n\n  data.data.forEach((row) => {\n    if (row.date) {\n      if (!result[row.ine_code]) {\n        result[row.ine_code] = {};\n        result[row.ine_code]['name'] = row.province;\n      }\n      result[row.ine_code][row.date] = {};\n\n      const dateMinus1 = moment(row.date)\n        .subtract(1, 'days')\n        .format('YYYY-MM-DD');\n\n      // Some times, accumulated can be NA, let's grab the one from the previous\n      // day or 0 if it is the first day\n      let currentAccumulated = parseInt(row.cases_accumulated, 10);\n      if (isNaN(currentAccumulated)) {\n        currentAccumulated = result[row.ine_code][dateMinus1]\n          ? result[row.ine_code][dateMinus1]['accumulated']\n          : 0;\n      }\n\n      result[row.ine_code][row.date]['accumulated'] = currentAccumulated;\n      // Calculate new cases by subtracting accumulated of the previous day\n      if (result[row.ine_code][dateMinus1]) {\n        // Current date - previous date\n        result[row.ine_code][row.date]['new_cases'] =\n          currentAccumulated - result[row.ine_code][dateMinus1]['accumulated'];\n      } else {\n        // First date\n        result[row.ine_code][row.date]['new_cases'] = currentAccumulated;\n      }\n    }\n  });\n  return result;\n};\n\n/**\n * Build an object of this format:\n * {\n *   ine_code: {\n *     name: String,\n *     accumulated: Number,\n *   },\n *   ...\n * }\n * @param data Object from {@link buildCasesByProvinceDate} method.\n * @returns {Object}\n */\nconst buildLast14Days = (data) => {\n  const result = {};\n  const lastDate = getLastUpdateDate();\n  for (let ine_code of Object.keys(data)) {\n    result[ine_code] = {\n      name: data[ine_code].name,\n      accumulated: 0,\n    };\n    // Accumulate last 15 days of new cases\n    for (let i = 0; i < 15; ++i) {\n      const currentDate = moment(lastDate)\n        .subtract(i, 'days')\n        .format('YYYY-MM-DD');\n      result[ine_code].accumulated += data[ine_code][currentDate]\n        ? data[ine_code][currentDate].new_cases\n        : 0;\n    }\n  }\n  return result;\n};\n\n/**\n * Get date of the last available data.\n * @returns {String}\n */\nexport const getLastUpdateDate = () => {\n  if (!parsedData) {\n    throw new Error('Data not parsed');\n  }\n\n  // Last row seems to be empty, let's return previous one just in case\n  return (\n    parsedData.data[parsedData.data.length - 1].date ||\n    parsedData.data[parsedData.data.length - 2].date\n  );\n};\n","import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { fetchCovid19Data, getLastUpdateDate } from \"../../utils/covid19API\";\n\nexport const FETCH_COVID19_DATA = \"FETCH_COVID19_DATA\";\nexport const FETCH_COVID19_SUCCESSFUL = \"FETCH_COVID19_SUCCESSFUL\";\nexport const FETCH_COVID19_FAILED = \"FETCH_COVID19_FAILED\";\n\nfunction* fetchCovidData() {\n  try {\n    const covid19Data = yield call(fetchCovid19Data);\n    yield put({\n      type: FETCH_COVID19_SUCCESSFUL,\n      payload: { data: covid19Data, lastUpdateDate: getLastUpdateDate() },\n    });\n  } catch (e) {\n    yield put({ type: FETCH_COVID19_FAILED, payload: e.message });\n  }\n}\n\nfunction* covid19DataSaga() {\n  yield takeEvery(FETCH_COVID19_DATA, fetchCovidData);\n}\n\nexport default covid19DataSaga;\n","import { FETCH_COVID19_SUCCESSFUL, FETCH_COVID19_FAILED } from \"../sagas\";\n\nconst initialState = {\n  data: {},\n  lastUpdateDate: null,\n  noDataProvinces: [15, 27, 32, 36],\n};\n\nexport const covid19 = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_COVID19_SUCCESSFUL:\n      return { ...state, ...action.payload };\n    case FETCH_COVID19_FAILED:\n      return { ...state, data: {} };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { covid19 } from './covid19Reducer';\n\nexport const rootReducer = combineReducers({ covid19 });\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './reducers';\nimport covid19Sagas from './sagas';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\n// mount it on the Store\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\n// then run the saga\nsagaMiddleware.run(covid19Sagas);\n","import en from './en.json';\nimport es from './es.json';\n\nexport default { en, es };\n","import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n\n  p {\n    margin: 0;\n  }\n\n  @keyframes rotating {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  .loading {\n    animation: rotating 2s linear infinite;\n  }\n\n  .app-header {\n    background-color: #282c34;\n    height: 50px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-size: 14px;\n    color: white;\n\n    h1 {\n      margin: 0 auto;\n    }\n\n    h4 {\n      margin-left: 15px;\n    }\n\n    .loading {\n      margin-left: 20px;\n    }\n\n    #languages {\n      margin-left: auto;\n      a {\n        color: #fff;\n        margin-right: 12px;\n        text-decoration: none;\n        font-weight: bold;\n\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const MAP_RED = '#CC0000';\nexport const MAP_YELLOW = '#FFFF00';\nexport const MAP_GREEN = '#4C9900';\n\nexport const MainWrapper = styled.div`\n  flex: 1;\n\n  .leaflet-container {\n    height: 100%;\n  }\n\n  #map-legend-wrapper {\n    position: fixed;\n    right: 25px;\n    bottom: 25px;\n    z-index: 1000;\n  }\n\n  #menu-icon {\n    position: fixed;\n    right: 25px;\n    bottom: 25px;\n    z-index: 1000;\n    background-color: #eee;\n    box-shadow: 10px 10px 50px 10px rgba(0, 0, 0, 0.3);\n    padding: 15px;\n    border: 1px solid #bbb;\n    border-radius: 4px;\n    display: none;\n  }\n\n  &.mobile-layout {\n    #map-legend-wrapper:not(.show) {\n      display: none;\n    }\n\n    #menu-icon:not(.hide) {\n      display: block;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nimport { MAP_RED, MAP_YELLOW, MAP_GREEN } from './Main';\n\nexport const MapLegendWrapper = styled.div`\n  background-color: #eee;\n  box-shadow: 10px 10px 50px 10px rgba(0, 0, 0, 0.3);\n  padding: 15px;\n  border: 1px solid #bbb;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n\n  p {\n    font-size: 14px;\n    margin-bottom: 15px;\n\n    &:last-child {\n      margin-bottom: 0;\n      font-size: 12px;\n    }\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 15px;\n    font-size: 12px;\n    align-items: center;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n\n    .color-box {\n      width: 40px;\n      height: 25px;\n      border: 1px solid #bbb;\n      border-radius: 4px;\n      margin-right: 6px;\n      opacity: 0.7;\n\n      &.red {\n        background-color: ${MAP_RED};\n      }\n\n      &.yellow {\n        background-color: ${MAP_YELLOW};\n      }\n\n      &.green {\n        background-color: ${MAP_GREEN};\n      }\n\n      &.black {\n        background-color: #000;\n      }\n    }\n  }\n`;\n","import { defineMessages } from \"react-intl.macro\";\n\nconst messages = defineMessages({\n  /**\n   * App.js\n   */\n  title: {\n    id: \"app.title\",\n    defaultMessage: \"Spain Covid-19\",\n  },\n  updateDate: {\n    id: \"app.updateDate\",\n    defaultMessage: \"Data last update date: {lastUpdateDate}\",\n  },\n\n  /**\n   * Main.js\n   */\n  provincePopup: {\n    id: \"main.provincePopup\",\n    defaultMessage:\n      \"Province: {name}<br />Accumulated cases in last 15 days: {accumulated}\",\n  },\n  noData: {\n    id: \"main.noData\",\n    defaultMessage: \"Province: {name}<br />,Data not available.\",\n  },\n\n  /**\n   * MapLegend.js\n   */\n  legendTitle: {\n    id: \"legend.title\",\n    defaultMessage: \"Last 14 days\",\n  },\n  legendRed: {\n    id: \"legend.red\",\n    defaultMessage: \"> 50 cases\",\n  },\n  legendYellow: {\n    id: \"legend.yellow\",\n    defaultMessage: \"< 50 cases\",\n  },\n  legendGreen: {\n    id: \"legend.green\",\n    defaultMessage: \"0 cases\",\n  },\n  legendBlack: {\n    id: \"legend.black\",\n    defaultMessage: \"Data not available\",\n  },\n  dataSource: {\n    id: \"legend.source\",\n    defaultMessage: \"Data source: <a>Escovid19data</a>\",\n  },\n});\n\nexport default messages;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { MapLegendWrapper } from \"../../styles/MapLegend\";\nimport messages from \"../../i18n/allMessages\";\n\nconst ColorLegend = ({ className, text }) => {\n  return (\n    <div>\n      <div className={`color-box ${className}`}></div>\n      {text}\n    </div>\n  );\n};\n\nconst MapLegend = ({ className }) => {\n  const { formatMessage } = useIntl();\n  return (\n    <MapLegendWrapper id=\"map-legend-wrapper\" className={className}>\n      <p>{formatMessage(messages.legendTitle)}</p>\n      <ColorLegend className=\"red\" text={formatMessage(messages.legendRed)} />\n      <ColorLegend\n        className=\"yellow\"\n        text={formatMessage(messages.legendYellow)}\n      />\n      <ColorLegend\n        className=\"green\"\n        text={formatMessage(messages.legendGreen)}\n      />\n      <ColorLegend\n        className=\"black\"\n        text={formatMessage(messages.legendBlack)}\n      />\n      <p>\n        {formatMessage(messages.dataSource, {\n          a: (msg) => (\n            <a\n              target=\"_blank\"\n              href=\"https://github.com/montera34/escovid19data\"\n            >\n              {msg}\n            </a>\n          ),\n        })}\n      </p>\n    </MapLegendWrapper>\n  );\n};\n\nexport default MapLegend;\n","/**\n * Selector to get last update date from redux store.\n * @param {Object} state\n */\nexport const getLastUpdateDate = (state) => state.covid19.lastUpdateDate;\n\n/**\n * Return data for last 14 days.\n * @param {Object} state\n */\nexport const getLast14ByProvice = (state) =>\n  state.covid19.data.last_14_by_province;\n\n/**\n * Return list of provinces whose data is not available\n * @param {Object} state\n */\nexport const getNoDataProvinces = (state) => state.covid19.noDataProvinces;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useIntl } from \"react-intl\";\nimport { Map, GeoJSON, TileLayer, Popup } from \"react-leaflet\";\nimport { List } from \"@material-ui/icons\";\nimport { isMobile } from \"react-device-detect\";\n\nimport MapLegend from \"../mapLegend/MapLegend\";\nimport { MainWrapper, MAP_RED, MAP_YELLOW, MAP_GREEN } from \"../../styles/Main\";\nimport spainProvinces from \"../../data/spain-provinces.json\";\nimport { FETCH_COVID19_DATA } from \"../../redux/sagas\";\n\nimport { getLast14ByProvice, getNoDataProvinces } from \"../../redux/selectors\";\nimport messages from \"../../i18n/allMessages\";\n\nconst LAT_LNG = [37.485818, -5.877067];\nconst ZOOM = 5;\n\n/**\n * Return a color depending on the number of cases reported in the given province.\n * @param {Number} provinceCode\n * @param {Number} cases\n * @param {Array} noDataProvinces\n */\nconst getColor = (provinceCode, cases, noDataProvinces) => {\n  if (noDataProvinces.includes(provinceCode)) {\n    return \"#000\";\n  }\n\n  if (cases >= 50) {\n    return MAP_RED;\n  } else if (cases > 0) {\n    return MAP_YELLOW;\n  }\n  return MAP_GREEN;\n};\n\n/**\n * Popup component for map. Render a message as the body of the popup.\n * @param {Object} props\n */\nconst MapPopup = ({ children }) => (\n  <Popup>\n    <p>{children}</p>\n  </Popup>\n);\n\nconst Main = (props) => {\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const [openLegend, setOpenLenged] = useState(false);\n  const last14ByProvince = useSelector(getLast14ByProvice);\n  const noDataProvinces = useSelector(getNoDataProvinces);\n\n  /**\n   * Fetch data from server.\n   */\n  useEffect(() => {\n    dispatch({ type: FETCH_COVID19_DATA });\n  }, []);\n\n  /**\n   * Close legend when interacting with the map.\n   */\n  const closeLegend = () => {\n    setOpenLenged(false);\n  };\n\n  /**\n   * Return style object for each of the provinces.\n   * @param {Object} feature\n   */\n  const geoJSONStyle = (feature) => {\n    return {\n      color: \"#1f2021\",\n      weight: 1,\n      fillOpacity: 0.5,\n      fillColor: getColor(\n        feature.properties.cartodb_id,\n        last14ByProvince[feature.properties.cartodb_id].accumulated,\n        noDataProvinces\n      ),\n    };\n  };\n\n  /**\n   * Create a popup to show the data for each province on click.\n   * @param {Object} feature\n   * @param {Object} layer\n   */\n  const onEachFeature = (feature, layer) => {\n    const message = formatMessage(\n      noDataProvinces.includes(feature.properties.cartodb_id)\n        ? messages.noData\n        : messages.provincePopup,\n      last14ByProvince[feature.properties.cartodb_id]\n    );\n    layer.bindPopup(`<MapPopup>${message}</MapPopup>`);\n  };\n\n  return last14ByProvince ? (\n    <MainWrapper className={isMobile ? \"mobile-layout\" : \"\"}>\n      <Map\n        center={LAT_LNG}\n        zoom={ZOOM}\n        onMove={closeLegend}\n        onClick={closeLegend}\n        onZoom={closeLegend}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          data={spainProvinces}\n          style={geoJSONStyle}\n          onEachFeature={onEachFeature}\n        />\n      </Map>\n      <List\n        id=\"menu-icon\"\n        className={openLegend ? \"hide\" : \"\"}\n        onClick={() => setOpenLenged(true)}\n      ></List>\n      <MapLegend className={openLegend ? \"show\" : \"\"}></MapLegend>\n    </MainWrapper>\n  ) : (\n    <></>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useIntl } from \"react-intl\";\nimport moment from \"moment\";\nimport { AppWrapper } from \"./styles/App.js\";\nimport Main from \"./components/main/Main.js\";\nimport { Loop } from \"@material-ui/icons\";\nimport { isMobile, withOrientationChange } from \"react-device-detect\";\n\nimport { getLastUpdateDate } from \"./redux/selectors\";\n\nimport messages from \"./i18n/allMessages\";\n\nconst App = ({ isLandscape }) => {\n  const { formatMessage } = useIntl();\n  const lastUpdateDate = useSelector(getLastUpdateDate);\n\n  return (\n    <AppWrapper>\n      <header className=\"app-header\">\n        {lastUpdateDate ? (\n          <h4>\n            {formatMessage(messages.updateDate, {\n              lastUpdateDate: moment(lastUpdateDate).format(\"DD-MM-YYYY\"),\n            })}\n          </h4>\n        ) : (\n          <Loop className=\"loading\" />\n        )}\n        {(!isMobile || isLandscape) && <h1>{formatMessage(messages.title)}</h1>}\n        <div id=\"languages\">\n          <a href=\"?locale=es\">Español</a>\n          <a href=\"?locale=en\">English</a>\n        </div>\n      </header>\n      <Main />\n    </AppWrapper>\n  );\n};\n\nexport default withOrientationChange(App);\n","import React, { Component } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport translations from './i18n/locales';\nimport App from './App';\n\nclass AppIntlWrapper extends Component {\n  render() {\n    const locale = window.location.search.replace('?locale=', '') || 'es';\n    const messages = translations[locale];\n    return (\n      <IntlProvider locale={locale} key={locale} messages={messages}>\n        <App />\n      </IntlProvider>\n    );\n  }\n}\n\nexport default AppIntlWrapper;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport AppIntlWrapper from './AppIntlWrapper';\n\nimport { GlobalStyle } from './styles/Index.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Provider store={store}>\n      <AppIntlWrapper />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}